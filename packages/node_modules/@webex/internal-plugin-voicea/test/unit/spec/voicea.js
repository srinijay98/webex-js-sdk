import MockWebex from '@webex/test-helper-mock-webex';
import MockWebSocket from '@webex/test-helper-mock-web-socket';
import {assert} from '@webex/test-helper-chai';
import sinon from 'sinon';

import VoiceaService from '@webex/internal-plugin-voicea';

import {EVENT_TRIGGERS} from '../../../src/constants';

describe('plugin-voicea', () => {
  const locusUrl = 'locusUrl';
  const datachannelUrl = 'datachannelUrl';

  describe('voicea', () => {
    let webex, voiceaService;
    const mockWebSocket = new MockWebSocket();

    beforeEach(() => {
      webex = new MockWebex({
        children: {
          voicea: VoiceaService
        },
        request: sinon.stub().returns(Promise.resolve({
          headers: {},
          body: ''
        })),
      });

      voiceaService = webex.internal.voicea;
      voiceaService.connect = sinon.stub().returns(() => true);
      voiceaService.register = sinon.stub().resolves({
        body: {
          binding: 'binding',
          webSocketUrl: 'url'
        }
      });
    });

    describe('#processAnnouncementMessage', () => {
      it('works on non-empty payload', async () => {
        const voiceaPayload = {
          translation: {
            allowed_languages: ['af', 'am'],
            max_languages: 5,
          },
          ASR: {
            spoken_languages: ['en']
          },

          version: 'v2'
        };

        const spy = sinon.spy();

        voiceaService.on(EVENT_TRIGGERS.VOICEA_ANNOUNCEMENT, spy);
        voiceaService.processAnnouncementMessage(voiceaPayload);
        assert.calledOnceWithExactly(spy, {
          captionLanguages: ['af', 'am'],
          spokenLanguages: ['en'],
          maxLanguages: 5
        });
      });

      it('works on non-empty payload', async () => {
        const spy = sinon.spy();

        voiceaService.on(EVENT_TRIGGERS.VOICEA_ANNOUNCEMENT, spy);
        await voiceaService.processAnnouncementMessage({});
        assert.calledOnceWithExactly(spy, {
          captionLanguages: [],
          spokenLanguages: [],
          maxLanguages: 0
        });
      });
    });

    describe.only('#requestLanguage', () => {
      beforeEach(async () => {
        await voiceaService.registerAndConnect(locusUrl, datachannelUrl);
        voiceaService.socket = mockWebSocket;
      });
      it('requests caption language', () => {
        voiceaService.requestLanguage('en');

        assert.calledOnceWithExactly(voiceaService.socket.send, {
          id: '1',
          type: 'publishRequest',
          recipients: {route: undefined},
          headers: {to: undefined},
          data: {
            clientPayload: {
              translationLanguage: 'en',
              id: sinon.match.string
            },
            eventType: 'relay.event',
            relayType: 'voicea.transl.req'
          },
          trackingId: sinon.match.string
        });
      });
    });

    describe('#setSpokenLanguage', () => {
      beforeEach(async () => {
        await voiceaService.registerAndConnect(locusUrl, datachannelUrl);
      });

      it('sets spoken language', async () => {
        const languageCode = 'en';
        const triggerSpy = sinon.spy();

        voiceaService.on(EVENT_TRIGGERS.SPOKEN_LANGUAGE_UPDATE, triggerSpy);
        await voiceaService.setSpokenLanguage(languageCode);

        assert.calledOnceWithExactly(triggerSpy, {languageCode});

        sinon.assert.calledWith(webex.request, sinon.match({
          method: 'PUT',
          url: `${locusUrl}/controls/`,
          body: {languageCode}
        }));
      });
    });

    describe('#turnOnCaptions', () => {
      beforeEach(async () => {
        await voiceaService.registerAndConnect(locusUrl, datachannelUrl);

        voiceaService.socket = mockWebSocket;
      });

      it('turns on captions', async () => {
        const announcementSpy = sinon.spy(voiceaService, 'sendAnnouncement');

        const triggerSpy = sinon.spy();

        voiceaService.on(EVENT_TRIGGERS.CAPTIONS_TURNED_ON, triggerSpy);
        await voiceaService.turnOnCaptions();
        sinon.assert.calledWith(webex.request, sinon.match({
          method: 'PUT',
          url: `${locusUrl}/controls/`,
          body: {transcribe: {caption: true}}
        }));

        assert.calledOnceWithExactly(triggerSpy, undefined);
        assert.calledOnce(announcementSpy);
      });

      it('does\'t call API on captions', async () => {
        await voiceaService.turnOnCaptions();

        voiceaService._emit('event:relay.event', {headers: {from: 'ws'}, voiceaPayload: {}, data: {relayType: 'voicea.annc'}});

        const response = voiceaService.turnOnCaptions();

        assert.equal(response, false);
      });
    });

    describe('#toggleTranscribing', () => {
      beforeEach(async () => {
        await voiceaService.registerAndConnect(locusUrl, datachannelUrl);

        voiceaService.socket = mockWebSocket;
      });

      it('turns on transcribing with CC enabled', async () => {
        // Turn on captions
        const announcementSpy = sinon.spy(voiceaService, 'sendAnnouncement');

        voiceaService._emit('event:relay.event', {headers: {from: 'ws'}, voiceaPayload: {}, data: {relayType: 'voicea.annc'}});

        const triggerSpy = sinon.spy();

        voiceaService.on(EVENT_TRIGGERS.TRANSCRIBING_ON, triggerSpy);
        await voiceaService.toggleTranscribing(true);
        sinon.assert.calledWith(webex.request, sinon.match({
          method: 'PUT',
          url: `${locusUrl}/controls/`,
          body: {transcribe: {transcribing: true}}
        }));

        assert.calledOnce(triggerSpy);
        assert.notCalled(announcementSpy);
      });

      it('turns on transcribing with CC disabled', async () => {
        const announcementSpy = sinon.spy(voiceaService, 'sendAnnouncement');

        const triggerSpy = sinon.spy();

        voiceaService.on(EVENT_TRIGGERS.TRANSCRIBING_ON, triggerSpy);
        await voiceaService.toggleTranscribing(true);
        sinon.assert.calledWith(webex.request, sinon.match({
          method: 'PUT',
          url: `${locusUrl}/controls/`,
          body: {transcribe: {transcribing: true}}
        }));

        assert.calledOnce(triggerSpy);
        assert.calledOnce(announcementSpy);
      });

      it('turns off transcribing', async () => {
        await voiceaService.toggleTranscribing(true);

        const announcementSpy = sinon.spy(voiceaService, 'sendAnnouncement');

        const triggerSpy = sinon.spy();

        voiceaService.on(EVENT_TRIGGERS.TRANSCRIBING_OFF, triggerSpy);
        await voiceaService.toggleTranscribing(false);
        sinon.assert.calledWith(webex.request, sinon.match({
          method: 'PUT',
          url: `${locusUrl}/controls/`,
          body: {transcribe: {transcribing: true}}
        }));

        assert.calledOnce(triggerSpy);
        assert.notCalled(announcementSpy);
      });

      it('does\'t call API on same value', async () => {
        await voiceaService.toggleTranscribing(true);
        const triggerSpy = sinon.spy();
        const announcementSpy = sinon.spy(voiceaService, 'sendAnnouncement');


        voiceaService.on(EVENT_TRIGGERS.TRANSCRIBING_OFF, triggerSpy);

        await voiceaService.toggleTranscribing(true);

        assert.notCalled(triggerSpy);
        assert.notCalled(announcementSpy);

        sinon.assert.calledThrice(webex.request);
      });
    });
  });
});
